use crate::ast::*;
use crate::statement::*;
use crate::lexer::*;
grammar;

pub Module: Box<AST>={
    <l:@L> <items: ModuleItem*> <r:@R>=> Box::new(AST::new((l,r),ASTData::Module(items)))
}

ModuleItem: Box<AST>={
    <ls:@L> "gen" <s:"Identifier"> "(" <l: Comma<Pair>> ")" "->" <t:"Identifier"> <m:Block> <r:@R>=> Box::new(AST::new((ls,r),ASTData::GenFunction(Box::new(ASTData::Function(s, t,l, m))))),
    Function
};

Function: Box<AST> = {<ls:@L> "fn" <s:"Identifier"> "(" <l: Comma<Pair>> ")" "->" <t:"Identifier"> <m:Block> <r:@R>=> Box::new(AST::new((ls,r),ASTData::Function(s, t,l, m))),
                      <ls:@L> "fn" <s:"Identifier"> "(" <l: Comma<Pair>> ")" <m:Block> <r:@R>=> Box::new(AST::new((ls,r),ASTData::Function(s, "()".to_string() ,l, m)))
                      }

Pair:(String, String) = {<l:"Identifier"> <r:"Identifier"> => (l,r)}

#[inline]
Comma<T>: Vec<T> = {
    <items: (<T> ",")*> <last: T?> => {
        let mut items = items;
        items.extend(last);
        items
    }
};

#[inline]
OneOrMore<T>: Vec<T> = {
    <i1: T> <i2:("," T)*> => {
        let mut items = vec![i1];
        items.extend(i2.into_iter().map(|e| e.1));
        items
    }
};

Statements: Vec<Statement> = {
    Statement*
}

Statement: Statement = {
    VariableDecl,
    If,
    Assignment,
    Block,
    Return,
    While,
    <l:@L> "break"    ";" <r:@R>=> Statement::new((l,r),StatementData::Break),
    <l:@L> "continue" ";" <r:@R> => Statement::new((l,r),StatementData::Continue),
    <l:@L> "yield" <e: Expr>";" <r:@R>=> Statement::new(
        (l, r),
        StatementData::Yield(Some(Box::new(e))),
    ),
    <l:@L> "yield" ";" <r:@R>=> Statement::new(
        (l, r),
        StatementData::Yield(None),
    ),
    <l:@L> "for" "(" <var:"Identifier"> "in" <func:FunCall> ")" <b:Block> <r:@R>=> Statement::new((l,r),StatementData::For(var,Box::new(func), Box::new(b))),
}


VariableDecl: Statement = {
    <l:@L> "var" <s: "Identifier"> <t:TypeDef> "=" <a:Expr> ";"  <r:@R>=> Statement::new(
        (l, r),
        StatementData::VariableDecl(
            s,
            t,
            Box::new(Statement::new((l, r), StatementData::Block(vec![a]))),
        ),
    ),


    <l:@L>"var" <s: "Identifier"> <t:TypeDef> "=" <a:Statement> <r:@R>=> Statement::new((l,r),StatementData::VariableDecl(s ,t, Box::new(a))),


    <l:@L> "var" <s: "Identifier"> <t:TypeDef>                   ";" <r:@R>=> Statement::new(
        (l, r),
        StatementData::VariableDecl(
            s,
            t,
            Box::new(Statement::new((l, r), StatementData::Block(vec![]))),
        ),
    ),
}

TypeDef: Option<String> = {
    (":" <"Identifier">)? => <>.map(|s| s)
}
Block: Statement = {
    <l:@L> "{" <m:Statements> "}" <r:@R>=> Statement::new((l,r),StatementData::Block(m))
}

Expr: Statement = {
    #[precedence(level="0")] 
    Term,
    #[precedence(level="1")] #[assoc(side="right")]
    <l:@L> "!" <e:Expr> <r:@R>=> Statement::new((l,r),StatementData::PreFix('!',Box::new(e))),
    <l:@L> "-" <e:Expr><r:@R> => Statement::new((l,r),StatementData::PreFix('-',Box::new(e))),
    #[precedence(level="2")] #[assoc(side="left")]
    <left:@L> <l:Expr> "*" <r:Expr> <right:@R>=> Statement::new((left,right),StatementData::Math(Box::new(l),'*',Box::new(r))),
    <left:@L> <l:Expr> "/" <r:Expr> <right:@R>=> Statement::new((left,right),StatementData::Math(Box::new(l),'/',Box::new(r))),
    #[precedence(level="3")] #[assoc(side="left")]
    <left:@L> <l:Expr> "+" <r:Expr> <right:@R>=> Statement::new((left,right),StatementData::Math(Box::new(l),'+',Box::new(r))),
    <left:@L> <l:Expr> "-" <r:Expr> <right:@R>=> Statement::new((left,right),StatementData::Math(Box::new(l),'-',Box::new(r))),
    <left:@L> <l:Expr> "==" <r:Expr> <right:@R>=> Statement::new((left,right),StatementData::Math(Box::new(l),'e',Box::new(r))),
    <left:@L> <l:Expr> "!=" <r:Expr> <right:@R>=> Statement::new((left,right),StatementData::Math(Box::new(l),'n',Box::new(r))),
    <left:@L> <l:Expr> "&&" <r:Expr> <right:@R>=> Statement::new((left,right),StatementData::Math(Box::new(l),'a',Box::new(r))),
    <left:@L> <l:Expr> "||" <r:Expr> <right:@R>=> Statement::new((left,right),StatementData::Math(Box::new(l),'o',Box::new(r))),
    <left:@L> <l:Expr> "<" <r:Expr>  <right:@R>=> Statement::new((left,right),StatementData::Math(Box::new(l),'l',Box::new(r))),
    <left:@L> <l:Expr> "<=" <r:Expr> <right:@R>=> Statement::new((left,right),StatementData::Math(Box::new(l),'p',Box::new(r))),
    <left:@L> <l:Expr> ">" <r:Expr>  <right:@R>=> Statement::new((left,right),StatementData::Math(Box::new(l),'g',Box::new(r))),
    <left:@L> <l:Expr> ">=" <r:Expr> <right:@R>=> Statement::new((left,right),StatementData::Math(Box::new(l),'q',Box::new(r))),

}


Term: Statement = {
    #[precedence(level="0")] 
    <l:@L> <n:"Num"> <r:@R>=> Statement::new((l,r),StatementData::Num(n)),
    <l:@L> "true" <r:@R>=> Statement::new((l,r),StatementData::BoolLet(true)), 
    <l:@L> "false" <r:@R>=> Statement::new((l,r),StatementData::BoolLet(false)),
    <l:@L> <slet:"stringlet"> <r:@R>=> Statement::new((l,r),StatementData::StringLet(slet)),
    FunCall,
    #[precedence(level="1")] 
    <l:@L> <i:"Identifier"> <r:@R>=> Statement::new((l,r),StatementData::Identifier(i)),
    "("  <Expr> ")" => <> ,
}

 FunCall: Statement = {<l:@L> <i:"Identifier"> "(" <args:OneOrMore<Expr>> ")" <r:@R>=> Statement::new((l,r),StatementData::Call(i,args))}

If: Statement = {
    <l:@L>"if" "(" <condition:Expr> ")" <stats: Block> <el: Else?> <r:@R>=> Statement::new((l,r),StatementData::If(Box::new(condition), Box::new(stats), Box::new(el.unwrap_or(Statement::new((l,r),StatementData::Block(vec![]))))))
}
Else: Statement = {
    "else" <Block> => <>
}
Return: Statement = {
    <l:@L> "return" <e:Expr> ";" <r:@R>=> Statement::new((l,r),StatementData::Return(Some(Box::new(e)))),
    <l:@L> "return" ";" <r:@R>=> Statement::new((l,r),StatementData::Return(None)),
}

Assignment: Statement = {
    <l:@L> <name:"Identifier"> "=" <es:Statement> <r:@R> => Statement::new((l,r),StatementData::Assignment(name.to_string(), Box::new(es))),
    <l:@L> <name:"Identifier"> "="  <le:@L> <e:Expr>  <re:@R> ";" <r:@R>  => Statement::new((l,r),StatementData::Assignment(name.to_string(), Box::new(Statement::new((le,re),StatementData::Block(vec![e]))))),    
}

While: Statement = {
    <l:@L> "while" <e:Expr> <s:Statement> <r:@R> => Statement::new((l,r),StatementData::While(Box::new(e), Box::new(s))),
    <l:@L> "loop" <s:Statement> <r:@R> => Statement::new((l,r),StatementData::While(Box::new(Statement::new((l,r),StatementData::BoolLet(true))),Box::new(s))),
}

extern {
    type Location = usize;
    type Error = LexicalError;
  
    enum Token {
        "fn" => Token::KeywordFn,
        "gen" => Token::KeywordGen,
        "var" => Token::KeywordVar,
        "if" => Token::KeywordIf,
        "else" => Token::KeywordElse,
        "return" => Token::KeywordReturn,
        "true" => Token::KeywordTrue,
        "false" => Token::KeywordFalse,
        "while" => Token::KeywordWhile,
        "loop" => Token::KeywordLoop,
        "continue" => Token::KeywordContinue,
        "break" => Token::KeywordBreak,
        "yield" => Token::KeywordYield,
        "for" => Token::KeywordFor,
        "in" => Token::KeywordIn,

        "Identifier" => Token::Identifier(<String>),
        "Num" => Token::Num(<i64>),
        "stringlet" => Token::StringLet(<String>),
        "(" => Token::LParen,
        ")" => Token::RParen,
        
        "{" => Token::LPrace,
        "}" => Token::RPrace,

        "=" => Token::Assign,
        ";" => Token::Semicolon,
        "," => Token::Comma,
        ":" => Token::Colon,

        "+" => Token::Add,
        "-" => Token::Sub,
        "*" => Token::Mul,
        "/" => Token::Div,

        "==" => Token::Equal,
        "!=" => Token::NotEqual,
        "<"  => Token::Less,
        "<="  => Token::LessOrEqual,
        ">"  => Token::Greater,
        ">="  => Token::GreaterOrEqual,
        "!" => Token::Not,
        "&&" => Token::And,
        "||" => Token::Or,
        "->" => Token::Arrow,

    }

}